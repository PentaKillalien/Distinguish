//
// File generated by HDevelop for HALCON/.NET (C#) Version 19.05.0.0
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using HalconDotNet;
using HalconPlay.Model;

public partial class HDevelopExport
{
    public ClipData clipData { get; set; }
    public HTuple hv_ExpDefaultWinHandle;

    public string Path { get; set; }
    public HDevelopExport()
    {

    }
    public HDevelopExport(string Path)
    {
        this.Path = Path;
    }
    // Main procedure 
    private void action()
  {


    // Local iconic variables 

    HObject ho_Clip1, ho_Clip, ho_Dark, ho_Region;
    HObject ho_RegionDilation, ho_RegionFillUp1, ho_RegionFillUp;
    HObject ho_RegionErosion, ho_ConnectedRegions, ho_Selected;

    // Local control variables 

    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_UsedThreshold = new HTuple(), hv_Area = new HTuple();
    HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
    HTuple hv_Number = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Clip1);
    HOperatorSet.GenEmptyObj(out ho_Clip);
    HOperatorSet.GenEmptyObj(out ho_Dark);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_RegionDilation);
    HOperatorSet.GenEmptyObj(out ho_RegionFillUp1);
    HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
    HOperatorSet.GenEmptyObj(out ho_RegionErosion);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_Selected);
    ho_Clip1.Dispose();
    HOperatorSet.ReadImage(out ho_Clip1, Path);
    ho_Clip.Dispose();
    HOperatorSet.Rgb1ToGray(ho_Clip1, out ho_Clip);
    hv_Width.Dispose();hv_Height.Dispose();
    HOperatorSet.GetImageSize(ho_Clip, out hv_Width, out hv_Height);
    ho_Dark.Dispose();hv_UsedThreshold.Dispose();
    HOperatorSet.BinaryThreshold(ho_Clip, out ho_Dark, "max_separability", "light", 
        out hv_UsedThreshold);
    ho_Region.Dispose();
    HOperatorSet.OpeningCircle(ho_Dark, out ho_Region, 1.5);
    ho_RegionDilation.Dispose();
    HOperatorSet.DilationCircle(ho_Region, out ho_RegionDilation, 7);
    ho_RegionFillUp1.Dispose();
    HOperatorSet.FillUpShape(ho_RegionDilation, out ho_RegionFillUp1, "area", 5000, 
        30000);
    ho_RegionFillUp.Dispose();
    HOperatorSet.FillUp(ho_Region, out ho_RegionFillUp);
    ho_RegionErosion.Dispose();
    HOperatorSet.ErosionCircle(ho_RegionFillUp, out ho_RegionErosion, 7);
    ho_ConnectedRegions.Dispose();
    HOperatorSet.Connection(ho_RegionErosion, out ho_ConnectedRegions);
    ho_Selected.Dispose();
    HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_Selected, "area", "and", 
        8000, 99999);
    hv_Area.Dispose();hv_Row.Dispose();hv_Column.Dispose();
    HOperatorSet.AreaCenter(ho_Selected, out hv_Area, out hv_Row, out hv_Column);
    hv_Number.Dispose();
    HOperatorSet.CountObj(ho_Selected, out hv_Number);
        clipData.ImageWidth = hv_Width.ToString();
        clipData.ImageHeight = hv_Height.ToString();
        clipData.ClipAreas = hv_Area.ToString();
        clipData.ClipYs = hv_Row.ToString();
        clipData.ClipXs = hv_Column.ToString();
        clipData.ClipCount = hv_Number.ToString();


        ho_Clip1.Dispose();
    ho_Clip.Dispose();
    ho_Dark.Dispose();
    ho_Region.Dispose();
    ho_RegionDilation.Dispose();
    ho_RegionFillUp1.Dispose();
    ho_RegionFillUp.Dispose();
    ho_RegionErosion.Dispose();
    ho_ConnectedRegions.Dispose();
    ho_Selected.Dispose();

    hv_Width.Dispose();
    hv_Height.Dispose();
    hv_UsedThreshold.Dispose();
    hv_Area.Dispose();
    hv_Row.Dispose();
    hv_Column.Dispose();
    hv_Number.Dispose();

  }

  public void InitHalcon()
  {
    // Default settings used in HDevelop
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
  }

    public ClipData RunHalcon(HTuple Window)
    {
        clipData = new ClipData();
        hv_ExpDefaultWinHandle = Window;
        action();
        if (clipData != null)
        {
            return clipData;
        }
        return null;
    }


}

